logging:
  file:
    name: C:/Users/80419/Documents/back-function-impl/logs/application.log
    max-size: 10MB
    max-history: 10
  level:
    root: INFO
    org.springframework: DEBUG
    org.springframework.core.env: TRACE
    org.springframework.boot.autoconfigure: DEBUG
    org.springframework.web: DEBUG
    org.springframework.web.reactive: DEBUG
    com.backfunctionimpl: TRACE
    io.github.cdimascio.dotenv: DEBUG
    org.hibernate: DEBUG
    com.zaxxer.hikari: DEBUG

spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://db-airflow.c9ey8eai2kkp.ap-northeast-2.rds.amazonaws.com:3306/airflow?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: ${DB_USERNAME:default-username}
    password: ${DB_PASSWORD:default-password}
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect
    hibernate:
      ddl-auto: update # 'create' 대신 'update'로 변경 권장
    generate-ddl: false
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: "http://localhost:8081/login/oauth2/code/google"
            scope:
              - email
              - profile
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8081/login/oauth2/code/naver
            scope:
              - name
              - email
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
    redis:
      host: localhost
      port: 6379
      cache:
        type: redis

jwt:
  secret:
    key: ${JWT_SECRET_KEY}

skyscanner:
  api-key: ${SKYSCANNER_API_KEY}
  api-host: ${SKYSCANNER_API_HOST}

google:
  maps-key: ${GOOGLE_MAPS_API_KEY}

cloud:
  aws:
    credentials:
      access-key: ${AWS_ACCESS_KEY}
      secret-key: ${AWS_SECRET_KEY}
    region:
      static: ap-northeast-2
    stack:
      auto: false

application:
  bucket:
    name: joo-legend
  servlet:
    multipart:
      enabled: true
      max-file-size: 10MB
      max-request-size: 50MB
    file:
      upload-dir: /uploads
